// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250708130731_Auction_Seeds")]
    partial class Auction_Seeds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BaselinePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ForceClosedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("ForceClosedReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("SellerId");

                    b.ToTable("Auctions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a507ebae-effd-4317-aa59-8df75282a953"),
                            BaselinePrice = 1000m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A well-maintained Mercedes C-Class from 2010, perfect for city driving and long trips.",
                            EndTime = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Mercedes C-Class 2010",
                            SellerId = new Guid("c75ce5c0-cf73-44be-849b-7e1de26ae992"),
                            StartTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("19d17521-1036-418b-9911-613e607c7be4"),
                            BaselinePrice = 300m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A beautiful painting of a city at night, perfect for art lovers.",
                            EndTime = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "City Night Painting",
                            SellerId = new Guid("c75ce5c0-cf73-44be-849b-7e1de26ae992"),
                            StartTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("9619c8d2-52ce-4185-b5c4-06a304ae936b"),
                            BaselinePrice = 250m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sneakers from a high-end fashion brand, perfect for collectors.",
                            EndTime = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "High End Fashion Sneakers",
                            SellerId = new Guid("8884546c-45cc-496e-97b1-b7c861c3cafa"),
                            StartTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("4f32e981-8c1e-4e3c-8e47-c98122d8ed49"),
                            BaselinePrice = 850m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A powerful workstation laptop, ideal for professionals and gamers.",
                            EndTime = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Workstation Laptop",
                            SellerId = new Guid("8884546c-45cc-496e-97b1-b7c861c3cafa"),
                            StartTime = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.AuctionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("AuctionImages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AuthenticationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("UserId");

                    b.ToTable("AuthenticationTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Bid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BidderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWinningBid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BidderId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("Bids", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac2a6499-f569-4dae-9eea-2fea12859abf"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "View the details of a user in the system.",
                            IsDeleted = false,
                            Key = "user.view",
                            Name = "View User"
                        },
                        new
                        {
                            Id = new Guid("997ac6b9-75bc-4889-8cff-656ab45e954a"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Be able to assign roles to a user. Be able to ban a user.",
                            IsDeleted = false,
                            Key = "user.edit",
                            Name = "Edit User"
                        },
                        new
                        {
                            Id = new Guid("d99f646b-3e0f-49ca-a1a5-752464939f0a"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Be able to create other administrators.",
                            IsDeleted = false,
                            Key = "user.create",
                            Name = "Create User"
                        },
                        new
                        {
                            Id = new Guid("1667e160-695c-4be8-b7a0-5e2a20de381f"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "View system roles available.",
                            IsDeleted = false,
                            Key = "role.view",
                            Name = "View Role"
                        },
                        new
                        {
                            Id = new Guid("f0f9bf98-4b47-453d-8ef4-c51bbe644b56"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Create a new role for the system.",
                            IsDeleted = false,
                            Key = "role.create",
                            Name = "Create Role"
                        },
                        new
                        {
                            Id = new Guid("9409c52e-685e-4554-acb1-d77b91571a6f"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Be able to assign permissions to a role.",
                            IsDeleted = false,
                            Key = "role.edit",
                            Name = "Edit Role"
                        },
                        new
                        {
                            Id = new Guid("beabb24d-8666-4b11-9b40-59c6024fc7e4"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "View auctions in the system in detail.",
                            IsDeleted = false,
                            Key = "auction.view",
                            Name = "View Auction"
                        },
                        new
                        {
                            Id = new Guid("939c7ba5-03c2-4779-8ce0-9fca2ab45375"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Be able to force-pause an auction.",
                            IsDeleted = false,
                            Key = "auction.edit",
                            Name = "Edit Auction"
                        },
                        new
                        {
                            Id = new Guid("07bd98b0-0c87-4926-b001-5bee0b5fcb1c"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Be able to delete an auction.",
                            IsDeleted = false,
                            Key = "auction.delete",
                            Name = "Delete Auction"
                        },
                        new
                        {
                            Id = new Guid("63291f30-83ab-4786-9469-f003ffadb39d"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Be able to view user's wallets & transactions.",
                            IsDeleted = false,
                            Key = "wallet.view",
                            Name = "View Wallet"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedByName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("ac2a6499-f569-4dae-9eea-2fea12859abf"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("997ac6b9-75bc-4889-8cff-656ab45e954a"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("d99f646b-3e0f-49ca-a1a5-752464939f0a"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("1667e160-695c-4be8-b7a0-5e2a20de381f"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("f0f9bf98-4b47-453d-8ef4-c51bbe644b56"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("9409c52e-685e-4554-acb1-d77b91571a6f"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("beabb24d-8666-4b11-9b40-59c6024fc7e4"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("939c7ba5-03c2-4779-8ce0-9fca2ab45375"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("07bd98b0-0c87-4926-b001-5bee0b5fcb1c"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            PermissionId = new Guid("63291f30-83ab-4786-9469-f003ffadb39d"),
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a")
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("FailedLoginTries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsAdministrator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fc111de-788d-49b2-ba73-7a1e62e9c42e"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@mail.com",
                            FailedLoginTries = 0,
                            FirstName = "admin",
                            IsAdministrator = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEmailVerified = true,
                            LastName = "admin",
                            PasswordHash = "B6A47A6149DD7EA70F2DD58484DAAB210EDA9FFB64EBA70D9B9B62BAB00243FC51D4CBFE30DCDE5C8B3D54D20E7A6C3B4C52AC98CC20BE9391D7533AF7921644",
                            PasswordSalt = "17EDD51F0D912E62D8320FA1324045F519B8AFA64F1446F68DEAE300A174A1980BE1FABDF4B502E1089DF4C84A49B8FAF906BDFBBC2C2DF7BEA6697F7CA6E7D1"
                        },
                        new
                        {
                            Id = new Guid("c75ce5c0-cf73-44be-849b-7e1de26ae992"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "kevinshemili5@gmail.com",
                            FailedLoginTries = 0,
                            FirstName = "Kevin",
                            IsAdministrator = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEmailVerified = true,
                            LastName = "Shemili",
                            PasswordHash = "B6A47A6149DD7EA70F2DD58484DAAB210EDA9FFB64EBA70D9B9B62BAB00243FC51D4CBFE30DCDE5C8B3D54D20E7A6C3B4C52AC98CC20BE9391D7533AF7921644",
                            PasswordSalt = "17EDD51F0D912E62D8320FA1324045F519B8AFA64F1446F68DEAE300A174A1980BE1FABDF4B502E1089DF4C84A49B8FAF906BDFBBC2C2DF7BEA6697F7CA6E7D1"
                        },
                        new
                        {
                            Id = new Guid("8884546c-45cc-496e-97b1-b7c861c3cafa"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "kevin.shemili@edu.unifi.it",
                            FailedLoginTries = 0,
                            FirstName = "John",
                            IsAdministrator = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEmailVerified = true,
                            LastName = "Johnson",
                            PasswordHash = "B6A47A6149DD7EA70F2DD58484DAAB210EDA9FFB64EBA70D9B9B62BAB00243FC51D4CBFE30DCDE5C8B3D54D20E7A6C3B4C52AC98CC20BE9391D7533AF7921644",
                            PasswordSalt = "17EDD51F0D912E62D8320FA1324045F519B8AFA64F1446F68DEAE300A174A1980BE1FABDF4B502E1089DF4C84A49B8FAF906BDFBBC2C2DF7BEA6697F7CA6E7D1"
                        },
                        new
                        {
                            Id = new Guid("783855e1-d39d-402a-9235-175eaf1eb472"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "kevin001sh@gmail.com",
                            FailedLoginTries = 0,
                            FirstName = "Adam",
                            IsAdministrator = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEmailVerified = true,
                            LastName = "Smith",
                            PasswordHash = "B6A47A6149DD7EA70F2DD58484DAAB210EDA9FFB64EBA70D9B9B62BAB00243FC51D4CBFE30DCDE5C8B3D54D20E7A6C3B4C52AC98CC20BE9391D7533AF7921644",
                            PasswordSalt = "17EDD51F0D912E62D8320FA1324045F519B8AFA64F1446F68DEAE300A174A1980BE1FABDF4B502E1089DF4C84A49B8FAF906BDFBBC2C2DF7BEA6697F7CA6E7D1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedByName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            AssignedByName = "system",
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            RoleId = new Guid("2193d4c2-3d86-4059-a642-e5338c51167a"),
                            UserId = new Guid("5fc111de-788d-49b2-ba73-7a1e62e9c42e")
                        });
                });

            modelBuilder.Entity("Domain.Entities.VerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("TokenTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("FrozenBalance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1da693bc-9c40-4ca4-a0f4-1c5af1a9d391"),
                            Balance = 1000m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FrozenBalance = 0m,
                            IsDeleted = false,
                            UserId = new Guid("c75ce5c0-cf73-44be-849b-7e1de26ae992")
                        },
                        new
                        {
                            Id = new Guid("14e2427a-99f2-47d5-a02d-e565e212fc03"),
                            Balance = 1000m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FrozenBalance = 0m,
                            IsDeleted = false,
                            UserId = new Guid("8884546c-45cc-496e-97b1-b7c861c3cafa")
                        },
                        new
                        {
                            Id = new Guid("aa9bf01e-3879-4ce7-8ebb-07a18818ebe7"),
                            Balance = 1000m,
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            FrozenBalance = 0m,
                            IsDeleted = false,
                            UserId = new Guid("783855e1-d39d-402a-9235-175eaf1eb472")
                        });
                });

            modelBuilder.Entity("Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("BidId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BidId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("\"IsDeleted\" = false");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Auction", b =>
                {
                    b.HasOne("Domain.Entities.User", "Seller")
                        .WithMany("Auctions")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Domain.Entities.AuctionImage", b =>
                {
                    b.HasOne("Domain.Entities.Auction", "Auction")
                        .WithMany("Images")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("Domain.Entities.AuthenticationToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("AuthenticationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Bid", b =>
                {
                    b.HasOne("Domain.Entities.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Bidder")
                        .WithMany("Bids")
                        .HasForeignKey("BidderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Bidder");
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.VerificationToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("VerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("Domain.Entities.Bid", "Bid")
                        .WithMany("Transactions")
                        .HasForeignKey("BidId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bid");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entities.Auction", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.Bid", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("AuthenticationTokens");

                    b.Navigation("Bids");

                    b.Navigation("UserRoles");

                    b.Navigation("VerificationTokens");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
